# Notes, Features, Bugs & Improvements #


# To-Do:
# ---------------------------------------- #

Update README

Add postgresql to collect user data and playlist data when user logs in:
- user_id, user_name, user_playlists
- Create  a data schema for users & for playlists
- This app will also be using multiple databases through Prisma (Relational & NoSQL) 

Use async/awaits instead of promises:
- Add pagination to improve the rendering speed of the recommendations page
- Use a different data structure to store playlist ID's (instead of an array)
- How can we speed up the home page? 
-- Add a loading screen while the data is being fetched
-- Implement a caching mechanism to store the data in local storage

Set standard screen width for the application:
- So that the width doesn't change when objects are clicked/rendered
- This will also mean resizing some text elements

Add external playlist link to each playlist

Add user name and playlist title to each playlist tile on the recommendations page

Disable y-scroll on web page

Fix screen breakpoints for the application

# Research Guidelines:
# ---------------------------------------- #

To create a music playlist recommendation app that matches users 
based on how similar their playlists are, you will need to do the following:

- Gather a large dataset of music playlist data from users. 
  This data should include the song and artist names for each playlist.
- Use a machine learning algorithm, such as a clustering algorithm, 
  to analyze the data and identify common patterns and similarities among the playlists.
- Create a user interface that allows users to input their own playlist data and 
  receive recommendations for other users with similar playlists.
- Use the results of the machine learning algorithm to generate recommendations for each user, 
  based on how similar their playlists are to other users in the dataset.
- Test and refine the recommendation algorithm to improve the accuracy and relevance of the recommendations.


This is sample code for building a playlist recommendation app:

The code uses the KMeans clustering algorithm to identify groups of similar playlists,
and then uses the user's playlist to generate recommendations for 
other playlists in the same group. The recommendations are based on songs that are in the similar playlists 
but not in the user's playlist. This code is just a sample and may need to be modified and optimized for a specific use case.

import pandas as pd
from sklearn.cluster import KMeans

# Load the dataset of music playlist data
data = pd.read_csv("music_playlists.csv")

# Use the KMeans algorithm to identify clusters of similar playlists
kmeans = KMeans(n_clusters=10)
kmeans.fit(data)

# Create a user interface for inputting playlist data
print("Welcome to the music playlist recommendation app!")
print("Enter the song and artist names for each song in your playlist, separated by a comma. When you are done, enter 'done'.")

# Initialize an empty list to store the user's playlist
user_playlist = []

# Loop to input each song in the user's playlist
while True:
    song = input("Enter a song: ")
    if song.lower() == "done":
        break
    else:
        user_playlist.append(song)

# Use the KMeans model to predict which cluster the user's playlist belongs to
cluster = kmeans.predict([user_playlist])[0]

# Find the other playlists in the same cluster as the user's playlist
similar_playlists = data[data['cluster'] == cluster]

# Use the user's playlist to generate recommendations for similar playlists
recommendations = []
for playlist in similar_playlists:
    for song in playlist:
        if song not in user_playlist:
            recommendations.append(song)

# Print the recommendations
print("Based on your playlist, we recommend the following songs:")
for recommendation in recommendations:
    print(recommendation)


Overall, creating a music playlist recommendation app will require a combination of machine learning and software development skills. 
You may need to consult with experts in these fields to create a high-quality app.

# Notes:
# ---------------------------------------- #

Would like to open source the recommender model (best way to leverage AI/ML?)

How are we going to deploy the recommender model so that...
- we can send requests from the app through an API
- we can share access tokens with the recommender
- when user x logs in, the recommender suggests playlists for user x

Can I cache the playlists that have been rendered in the app?
- So that we don't have to render them again whenever the page is refreshed.
- How are we managing states in this app? via Recoil

Our current recommendation model uses content-based filtering:
- Content-based filtering is a technique for finding similar items in a dataset
- Thaker's model uses a playlist vector to summarize the songs in a playlist
- We should update the model to create a playlist vector for each playlist and use this to find similar playlists
- How can we connect our model to a postgresql database?

How are we going to keep track of the user's recommendations and liked playlists?

# New Features:
# ---------------------------------------- #

Include BPM for songs because we want this app to be helpful to DJs as well

Add Apple Music Integration + Authentication

Allow users to convert and save playlists to their library (Apple Music, Spotify, etc.)

Create user profiles so that:
- Each user can follow other users
- Each user can add playlists to their library (i.e, on Everyone's Radio)

# Resources:
# ---------------------------------------- #

How to Build a Full Stack App w/ Next.js, PostgreSQL & Prisma
- https://vercel.com/guides/nextjs-prisma-postgres
- https://github.com/prisma/blogr-nextjs-prisma/tree/final

PostgreSQL + Heroku Account:
- https://id.heroku.com/login

How to Build a Web Scraper Microservice:
- https://medium.com/hackernoon/microservice-series-scraper-ee970df3e81f
- https://www.youtube.com/watch?v=DxET43rUkig&ab_channel=RCCoding

ChatGPT (For research purposes)
- https://chat.openai.com/chat




So help me God.
